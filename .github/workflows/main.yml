# ===============================================================
# Workflow CI : Build + Tests automatiques + Analyse SonarCloud
# + Build & Push des images Docker
# ===============================================================

name: CI DevOps 2025

on:
  push:
    branches: [ main, develop ]     # Exécution sur push vers main ou develop
  pull_request:
    branches: [ main, develop ]     # Exécution sur pull request vers main ou develop

jobs:
  # -------------------------------------------------
  # Étape 1 : Test du backend Java avec Maven
  # -------------------------------------------------
  test-backend:
    runs-on: ubuntu-24.04           # Machine virtuelle Ubuntu

    steps:
      - uses: actions/checkout@v4   # Récupère le code du dépôt

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build and test with Maven
        run: mvn clean verify
        working-directory: backend   # Le pom.xml est dans le dossier backend

      # Analyse SonarCloud (nécessite le secret SONAR_TOKEN)
      - name: Run SonarCloud analysis
        run: |
          mvn -B verify sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.projectName=simple-api \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.scm.disabled=true \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.analysis.mode=publish \
            --file ./backend/pom.xml
        shell: bash


  # -------------------------------------------------
  # Étape 2 : Build et push des images Docker
  # -------------------------------------------------
  build-and-push-docker-image:
    needs: test-backend              # S’exécute uniquement si les tests passent
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Préparation du nom d'utilisateur Docker
      - name: Prepare Docker username
        run: |
          echo "Preparing Docker username"
          if [ -n "${{ secrets.SECRET_NAME }}" ]; then
            echo "DOCKER_USERNAME=${{ secrets.SECRET_NAME }}" >> $GITHUB_ENV
            echo "Using SECRET_NAME secret"
          elif [ -n "${{ secrets.SECRET_EMAIL }}" ]; then
            # Vérifie si SECRET_EMAIL contient un '@'
            if echo "${{ secrets.SECRET_EMAIL }}" | grep -q '@'; then
              echo "ERROR: SECRET_EMAIL contains '@' — please set SECRET_NAME instead."
              exit 1
            else
              echo "DOCKER_USERNAME=${{ secrets.SECRET_EMAIL }}" >> $GITHUB_ENV
              echo "Using SECRET_EMAIL as Docker username (no @ present)"
            fi
          else
            echo "ERROR: Set repository secret SECRET_NAME (preferred)."
            exit 1
          fi
        shell: bash

      # Validation des secrets requis
      - name: Validate Docker credentials
        run: |
          echo "Validating Docker credentials"
          if [ -z "${{ secrets.SECRET_NAME }}" ] && [ -z "${{ secrets.SECRET_EMAIL }}" ]; then
            echo "ERROR: SECRET_EMAIL or SECRET_NAME is not set."
            exit 1
          fi
          if [ -z "${{ secrets.SECRET_TOKEN }}" ] && [ -z "${{ secrets.SECRET_PASSWORD }}" ]; then
            echo "ERROR: Neither SECRET_TOKEN nor SECRET_PASSWORD is set."
            exit 1
          fi
          echo "Docker credentials validated"
        shell: bash

      # Étape de debug (ne montre jamais les valeurs sensibles)
      - name: Debug - check secrets presence
        run: |
          echo "SECRET_NAME: $( [ -n '${{ secrets.SECRET_NAME }}' ] && echo present || echo missing )"
          echo "SECRET_EMAIL: $( [ -n '${{ secrets.SECRET_EMAIL }}' ] && echo present || echo missing )"
          echo "SECRET_TOKEN: $( [ -n '${{ secrets.SECRET_TOKEN }}' ] && echo present || echo missing )"
          echo "SECRET_PASSWORD: $( [ -n '${{ secrets.SECRET_PASSWORD }}' ] && echo present || echo missing )"
          echo "DOCKER_USERNAME (env): $( [ -n \"$DOCKER_USERNAME\" ] && echo present || echo missing )"
        shell: bash


      # Build et push de l’image backend
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/backend:latest

      # Build et push de l’image base de données
      - name: Build and push database image
        uses: docker/build-push-action@v6
        with:
          context: ./initdb
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/initdb:latest

      # Build et push de l’image HTTPD
      - name: Build and push httpd image
        uses: docker/build-push-action@v6
        with:
          context: ./httpd
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/httpd:latest
