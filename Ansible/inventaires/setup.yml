# Workflow CI : build et tests automatiques du backend et déploiement des images Docker

name: CI devops 2025

on:
  push:
    branches: [ main, develop ]     # Exécution sur push vers main ou develop
  pull_request:
    branches: [ main, develop ]     # Exécution sur pull request vers main ou develop

jobs:
  # -------------------------------------------------
  # Étape 1 : Test du backend Java avec Maven
  # -------------------------------------------------
  test-backend:
    runs-on: ubuntu-24.04           # Machine virtuelle Ubuntu

    steps:
      - uses: actions/checkout@v4   # Récupère le code du dépôt

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'        # Installe Java 21
          distribution: 'temurin'

      - name: Build and test with Maven
        run: mvn clean verify        # Compile et lance les tests
        working-directory: backend   # Le pom.xml est dans le dossier backend

      # Run SonarCloud analysis (requires secret SONAR_TOKEN)
      - name: Run SonarCloud analysis
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=Project-Docker -Dsonar.organization=ansible-course -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} --file ./backend/pom.xml
        shell: bash


  # -------------------------------------------------
  # Étape 2 : Build et push des images Docker
  # -------------------------------------------------
  build-and-push-docker-image:
    needs: test-backend              # S’exécute uniquement si les tests passent
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Prepare Docker username for tagging (prefer DOCKERHUB_USERNAME)
      - name: Prepare Docker username
        run: |
          echo "Preparing Docker username"
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
            echo "Using DOCKERHUB_USERNAME secret"
          elif [ -n "${{ secrets.SECRET_EMAIL }}" ]; then
            # Check if SECRET_EMAIL contains an '@' (invalid for Docker username/tag)
            if echo "${{ secrets.SECRET_EMAIL }}" | grep -q '@'; then
              echo "ERROR: SECRET_EMAIL contains '@' — please set DOCKERHUB_USERNAME instead."
              exit 1
            else
              echo "DOCKER_USERNAME=${{ secrets.SECRET_EMAIL }}" >> $GITHUB_ENV
              echo "Using SECRET_EMAIL as Docker username (no @ present)"
            fi
          else
            echo "ERROR: Set repository secret DOCKERHUB_USERNAME (preferred). If you must use SECRET_EMAIL, ensure it contains a Docker username (no '@')."
            exit 1
          fi
        shell: bash

      # Validate that required secrets exist before attempting login
      - name: Validate Docker credentials
        run: |
          echo "Validating Docker credentials"
          if [ -z "${{ secrets.SECRET_EMAIL }}" ] && [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "ERROR: Repository secret SECRET_EMAIL or DOCKERHUB_USERNAME is not set. Add one in Settings > Secrets and variables > Actions"
            exit 1
          fi
          if [ -z "${{ secrets.SECRET_TOKEN }}" ] && [ -z "${{ secrets.SECRET_PASSWORD }}" ]; then
            echo "ERROR: Neither SECRET_TOKEN nor SECRET_PASSWORD is set. Add one of them in Settings > Secrets and variables > Actions"
            exit 1
          fi
          echo "Docker credentials validated"
        shell: bash

      # Debug step — n'affiche pas les valeurs sensibles, seulement la présence
      - name: Debug - check secrets presence
        run: |
          echo "DOCKERHUB_USERNAME: $( [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && echo present || echo missing )"
          echo "SECRET_EMAIL: $( [ -n "${{ secrets.SECRET_EMAIL }}" ] && echo present || echo missing )"
          echo "SECRET_TOKEN: $( [ -n "${{ secrets.SECRET_TOKEN }}" ] && echo present || echo missing )"
          echo "SECRET_PASSWORD: $( [ -n "${{ secrets.SECRET_PASSWORD }}" ] && echo present || echo missing )"
          echo "DOCKER_USERNAME (env): $( [ -n "$DOCKER_USERNAME" ] && echo present || echo missing )"
        shell: bash

      # Connexion sécurisée à Docker Hub (ou ECR si détecté)
      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          # Use DOCKERHUB_USERNAME if present, otherwise fallback to SECRET_EMAIL
          username: ${{ secrets.DOCKERHUB_USERNAME || secrets.SECRET_EMAIL }}
          password: ${{ secrets.SECRET_TOKEN || secrets.SECRET_PASSWORD }}
          ecr: auto
          logout: true

      # Build et push de l’image backend
      - name: Build image and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-backend:latest

      # Build et push de l’image base de données
      - name: Build image and push database
        uses: docker/build-push-action@v6
        with:
          context: ./initdb
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-database:latest

      # Build et push de l’image httpd
      - name: Build image and push httpd
        uses: docker/build-push-action@v6
        with:
          context: ./httpd
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/tp-devops-simple-api-httpd:latest
